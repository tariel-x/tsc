package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"text/template"
)

func main() {
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, os.Args[1], nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	var intype, outtype string

	ast.Inspect(file, func(x ast.Node) bool {
		td, ok := x.(*ast.TypeSpec)
		if !ok {
			return true
		}

		_, ok = td.Type.(*ast.StructType)
		if !ok {
			return true
		}

		if td.Name.Name == os.Args[2] {
			intype = td.Name.Name
			return false
		}

		if td.Name.Name == os.Args[3] {
			outtype = td.Name.Name
			return false
		}

		return true
	})

	if intype == "" || outtype == "" {
		fmt.Println("not valid type names")
		return
	}

	fmt.Println(intype, outtype)
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package main

var Contributors = []string{
{{- range .Carls }}
	{{ printf "%q" . }},
{{- end }}
}
`))
